@page "/xbooks"

@using Volo.Abp.Application.Dtos
@using LibraryDeneme.Books
@using LibraryDeneme.Localization
@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Components.Web
@using LibraryDeneme.Permissions
@inject IBookAppService BookAppService
@inject IStringLocalizer<LibraryDenemeResource> L
@inject AbpBlazorMessageLocalizerHelper<LibraryDenemeResource> LH
@inherits AbpCrudPageBase<IBookAppService, BookDto, Guid, PagedAndSortedResultRequestDto, CreateUpdateBookDto>

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["XBooks"]</h2>
            </Column>
            </Row>
         </CardHeader>
    <CardBody>
        <div class=" wrapper">
             <div class="input-container">   
                <input placeholder="Arama..." type="text" name="text" class="input" @bind="searchText" @oninput="@(async (e) => await SearchBooksAsync(e))" />
                     <span class="icon"> 
                 <svg width="19px" height="19px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path opacity="1" d="M14 5H20" stroke="#000" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path opacity="1" d="M14 8H17" stroke="#000" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M21 11.5C21 16.75 16.75 21 11.5 21C6.25 21 2 16.75 2 11.5C2 6.25 6.25 2 11.5 2" stroke="#000" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"></path> <path opacity="1" d="M22 22L20 20" stroke="#000" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
            </span>
          </div>
          </div>   

          <DataGrid TItem="BookDto"
                  Data="filteredBooks"
                  ReadData="OnDataGridReadAsync"
                  CurrentPage="CurrentPage"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridColumn TItem="BookDto"
                                Field="@nameof(BookDto.ShelfName)"
                                Caption="@L["Shelf"]"></DataGridColumn>

                <DataGridColumn TItem="BookDto"
                                Field="@nameof(BookDto.AuthorName)"
                                Caption="@L["Author"]"></DataGridColumn>

                <DataGridColumn TItem="BookDto"
                                Field="@nameof(BookDto.Name)"
                                Caption="@L["Name"]"></DataGridColumn>
                <DataGridColumn TItem="BookDto"
                                Field="@nameof(BookDto.Type)"
                                Caption="@L["Type"]">
                    <DisplayTemplate>
                        @L[$"Enum:BookType.{context.Type}"]
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="BookDto"
                                Field="@nameof(BookDto.PublishDate)"
                                Caption="@L["PublishDate"]">
                    <DisplayTemplate>
                        @context.PublishDate.ToShortDateString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="BookDto"
                                Field="@nameof(BookDto.Price)"
                                Caption="@L["Price"]">
                </DataGridColumn>
                <DataGridColumn TItem="BookDto"
                                Field="@nameof(BookDto.CreationTime)"
                                Caption="@L["CreationTime"]">
                    <DisplayTemplate>
                        @context.CreationTime.ToLongDateString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="BookDto"
                                Field="@nameof(BookDto.Floor)"
                                Caption="@L["Floor"]">
                    <DisplayTemplate>
                        @L[$"Enum:FloorNumber.{context.Floor}"]
                    </DisplayTemplate>
                    </DataGridColumn>

            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

@code{

    public string LibraryName = "X Kütüphanesi";

    private PagedResultDto<BookDto> books;
    private string searchText = "";
    private IReadOnlyList<BookDto> filteredBooks = Array.Empty<BookDto>();


    //ADDED A NEW FIELD
    IReadOnlyList<AuthorLookupDto> authorList = Array.Empty<AuthorLookupDto>();
    IReadOnlyList<ShelfLookupDto> shelfList = Array.Empty<ShelfLookupDto>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        authorList = (await AppService.GetAuthorLookupAsync()).Items;
        shelfList = (await AppService.GetShelfLookupAsync()).Items;
       
        await LoadBooksAsync();
    }

    private async Task SearchBooksAsync(ChangeEventArgs e)
    {
        searchText = e.Value.ToString();

        if (string.IsNullOrEmpty(searchText))
        {
            // Reset to all books if search text is empty
            filteredBooks = Entities;
            return;
        }

        filteredBooks = Entities.Where(book => book.Name.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                                                book.AuthorName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase))
                                  .ToList(); // Create a filtered copy
    }
    private async Task LoadBooksAsync()
    {
        books = await BookAppService.GetBooksByLibraryAsync(LibraryName, new PagedAndSortedResultRequestDto());

        // Sonuçları filtrelenmiş kitap listesine atayın
        filteredBooks = books.Items;
    }
}