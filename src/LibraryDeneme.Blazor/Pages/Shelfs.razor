@page "/shelfs"
@using Volo.Abp.Application.Dtos
@using LibraryDeneme.Books
@using LibraryDeneme.Shelfs
@using LibraryDeneme.Localization
@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Components.Web
@inject IStringLocalizer<LibraryDenemeResource> L
@inject AbpBlazorMessageLocalizerHelper<LibraryDenemeResource> LH

@inherits AbpCrudPageBase<IShelfAppService, ShelfDto, Guid, PagedAndSortedResultRequestDto, CreateUpdateShelfDto>
<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Shelfs"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary"
                        Clicked="OpenCreateModalAsync">
                    @L["NewShelfs"]
                </Button>
            </Column>
        </Row>
    </CardHeader>

    <CardBody>
    
        <DataGrid TItem="ShelfDto"
                  Data="Entities"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="ShelfDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="ShelfDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="ShelfDto"
                                          Text="@L["Delete"]"
                                          Clicked="() => DeleteEntityAsync(context)"
                                          ConfirmationMessage="() => GetDeleteConfirmationMessage(context)" />

                            <EntityAction TItem="ShelfDto"
                                          Text="@L["Edit"]"
                                          Clicked="() => OpenEditModalAsync(context)" />
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
                <DataGridColumn TItem="ShelfDto"
                                Field="@nameof(ShelfDto.ShelfName)"
                                Caption="@L["Name"]"></DataGridColumn>
                <DataGridColumn TItem="ShelfDto"
                                Field="@nameof(ShelfDto.ShelfType)"
                                Caption="@L["ShelfType"]">
                    <DisplayTemplate>
                        @L[$"Enum:SType.{context.ShelfType}"]
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ShelfDto"
                                Field="@nameof(ShelfDto.CreationTime)"
                                Caption="@L["CreationTime"]">
                    <DisplayTemplate>
                        @context.CreationTime.ToLongDateString()
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>
<Modal @ref="@CreateModal">
    <ModalBackdrop/>
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewShelf"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["ShelfName"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.ShelfName">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>@L["ShelfType"]</FieldLabel>
                        <Select TValue="SType" @bind-SelectedValue="@NewEntity.ShelfType">
                            @foreach (int shelfTypeValue in Enum.GetValues(typeof(SType)))
                            {
                                <SelectItem TValue="SType" Value="@((SType) shelfTypeValue)">
                                    @L[$"Enum:ShelfType.{shelfTypeValue}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">@L["Cancel"]</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateEntityAsync">@L["Save"]</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
    
</Modal>
<Modal @ref="@EditModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingEntity.ShelfName</ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.ShelfName">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>@L["Type"]</FieldLabel>
                        <Select TValue="SType" @bind-SelectedValue="@EditingEntity.ShelfType">
                            @foreach (int shelfTypeValue in Enum.GetValues(typeof(SType)))
                            {
                                <SelectItem TValue="SType" Value="@((SType) shelfTypeValue)">
                                    @L[$"Enum:SType.{shelfTypeValue}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditModalAsync">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateEntityAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
