@page "/shelfs"
@using LibraryDeneme.Shelfs
@using LibraryDeneme.Localization
@using Volo.Abp.AspNetCore.Components.Web
@using LibraryDeneme.Books
@inherits LibraryDenemeComponentBase
@inject IShelfAppService ShelfAppService
@inject AbpBlazorMessageLocalizerHelper<LibraryDenemeResource> LH
<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Shelfs"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                    @if (CanCreateShelf)
                    {
                        <Button Color="Color.Primary"
                                Clicked="OpenCreateShelfModal">
                            @L["NewShelfs"]
                        </Button>
                    }
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="ShelfDto"
                  Data="ShelfList"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridColumn Width="150px"
                                TItem="ShelfDto"
                                Field="@nameof(ShelfDto.Id)"
                                Sortable="false"
                                Caption="@L["Actions"]">
                    <DisplayTemplate>
                        <Dropdown>
                            <DropdownToggle Color="Color.Primary">
                                @L["Actions"]
                            </DropdownToggle>
                            <DropdownMenu>
                                @if (CanEditShelf)
                                {
                                    <DropdownItem Clicked="() => OpenEditShelfModal(context)">
                                        @L["Edit"]
                                    </DropdownItem>
                                }
                                @if (CanDeleteShelf)
                                {
                                    <DropdownItem Clicked="() => DeleteShelfAsync(context)">
                                        @L["Delete"]
                                    </DropdownItem>
                                }
                            </DropdownMenu>
                        </Dropdown>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ShelfDto"
                                Field="@nameof(ShelfDto.ShelfName)"
                                Caption="@L["Name"]"></DataGridColumn>
                <DataGridColumn TItem="ShelfDto"
                                Field="@nameof(ShelfDto.ShelfType)"
                                Caption="@L["ShelfType"]">
                    <DisplayTemplate>
                        @L[$"Enum:SType.{context.ShelfType}"]
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ShelfDto"
                                Field="@nameof(ShelfDto.ShelfBolum)"
                                Caption="@L["Bolum"]">
                    <DisplayTemplate>
                        @L[$"Enum:BolumType.{context.ShelfBolum}"]
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ShelfDto"
                                Field="@nameof(ShelfDto.CreationTime)"
                                Caption="@L["CreationTime"]">
                    <DisplayTemplate>
                        @context.CreationTime.ToLongDateString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ShelfDto"
                                Field="@nameof(ShelfDto.LastModificationTime)"
                                Caption="@L["LastModificationTime"]">
                    <DisplayTemplate>
                        @{
                            var lastModificationTime = context.LastModificationTime;
                        }
                        @if (lastModificationTime.HasValue)
                        {
                            @lastModificationTime.Value.ToLongDateString()
                        }
                        else
                        {
                            <span>Güncellenme tarihi yok</span>
                        }
                    </DisplayTemplate>
                </DataGridColumn>

            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<Modal @ref="CreateShelfModal">
    <ModalContent Centered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewShelf"]</ModalTitle>
                <CloseButton Clicked="CloseCreateShelfModal" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewShelf" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@NewShelf.ShelfName">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    </Validations>
                    <Field>
                        <FieldLabel>@L["ShelfType"]</FieldLabel>
                        <Select TValue="SType" @bind-SelectedValue="@NewShelf.ShelfType">
                            @foreach (int shelfTypeValue in Enum.GetValues(typeof(SType)))
                            {
                                <SelectItem TValue="SType" Value="@((SType) shelfTypeValue)">
                                    @L[$"Enum:SType.{shelfTypeValue}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                <Field>
                    <FieldLabel>@L["Bolum"]</FieldLabel>
                    <Select TValue="BolumType" @bind-SelectedValue="@NewShelf.ShelfBolum">
                        @foreach (int bolumTypeValue in Enum.GetValues(typeof(BolumType)))
                        {
                            <SelectItem TValue="BolumType" Value="@((BolumType) bolumTypeValue)">
                                @L[$"Enum:BolumType.{bolumTypeValue}"]
                            </SelectItem>
                        }
                    </Select>

                </Field>
                   
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateShelfModal">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateShelfAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<Modal @ref="EditShelfModal">
    <ModalContent Centered="true">
        <Form>
            <ModalHeader>
                        <ModalTitle>@EditingShelf.ShelfName</ModalTitle>
                        <CloseButton Clicked="CloseEditShelfModal" />
                    </ModalHeader>
            <ModalBody>
               <Validations @ref="@EditValidationsRef" Model="@EditingShelf" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingShelf.ShelfName">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    </Validations>
                    <Field>
                        <FieldLabel>@L["ShelfType"]</FieldLabel>
                        <Select TValue="SType" @bind-SelectedValue="@EditingShelf.ShelfType">
                            @foreach (int shelfTypeValue in Enum.GetValues(typeof(SType)))
                            {
                                <SelectItem TValue="SType" Value="@((SType) shelfTypeValue)">
                                    @L[$"Enum:SType.{shelfTypeValue}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                <Field>
                    <FieldLabel>@L["Bolum"]</FieldLabel>
                    <Select TValue="BolumType" @bind-SelectedValue="@EditingShelf.ShelfBolum">
                        @foreach (int bolumTypeValue in Enum.GetValues(typeof(BolumType)))
                        {
                            <SelectItem TValue="BolumType" Value="@((BolumType) bolumTypeValue)">
                                @L[$"Enum:BolumType.{bolumTypeValue}"]
                            </SelectItem>
                        }
                    </Select>

                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditShelfModal">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateShelfAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
