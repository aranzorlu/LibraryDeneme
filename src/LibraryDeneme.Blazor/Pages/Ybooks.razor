@page "/ybooks"

@using Volo.Abp.Application.Dtos
@using LibraryDeneme.Books
@using LibraryDeneme.Localization
@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Components.Web
@inject IBookAppService BookAppService
@inject IStringLocalizer<LibraryDenemeResource> L
@inject AbpBlazorMessageLocalizerHelper<LibraryDenemeResource> LH
@inherits AbpCrudPageBase<IBookAppService, BookDto, Guid, PagedAndSortedResultRequestDto, CreateUpdateBookDto>

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["YBooks"]</h2>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <div class=" wrapper">
            <div class="input-container">
                <input placeholder="Arama..." type="text" name="text" class="input" @bind="searchText" @oninput="@(async (e) => await SearchBooksAsync(e))" />
                <span class="icon">
                    <svg width="19px" height="19px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path opacity="1" d="M14 5H20" stroke="#000" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path opacity="1" d="M14 8H17" stroke="#000" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M21 11.5C21 16.75 16.75 21 11.5 21C6.25 21 2 16.75 2 11.5C2 6.25 6.25 2 11.5 2" stroke="#000" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"></path> <path opacity="1" d="M22 22L20 20" stroke="#000" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
                </span>
            </div>
        </div>

        <DataGrid TItem="BookDto"
                  Data="filteredBooks"
                  ReadData="OnDataGridReadAsync"
                  CurrentPage="CurrentPage"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridColumn TItem="BookDto"
                                Field="@nameof(BookDto.ShelfName)"
                                Caption="@L["Shelf"]"></DataGridColumn>

                <DataGridColumn TItem="BookDto"
                                Field="@nameof(BookDto.AuthorName)"
                                Caption="@L["Author"]"></DataGridColumn>

                <DataGridColumn TItem="BookDto"
                                Field="@nameof(BookDto.Name)"
                                Caption="@L["Name"]"></DataGridColumn>
                <DataGridColumn TItem="BookDto"
                                Field="@nameof(BookDto.Type)"
                                Caption="@L["Type"]">
                    <DisplayTemplate>
                        @L[$"Enum:BookType.{context.Type}"]
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="BookDto"
                                Field="@nameof(BookDto.PublishDate)"
                                Caption="@L["PublishDate"]">
                    <DisplayTemplate>
                        @context.PublishDate.ToShortDateString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="BookDto"
                                Field="@nameof(BookDto.Price)"
                                Caption="@L["Price"]">
                </DataGridColumn>
                <DataGridColumn TItem="BookDto"
                                Field="@nameof(BookDto.CreationTime)"
                                Caption="@L["CreationTime"]">
                    <DisplayTemplate>
                        @context.CreationTime.ToLongDateString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="BookDto"
                                Field="@nameof(BookDto.Floor)"
                                Caption="@L["Floor"]">
                    <DisplayTemplate>
                        @L[$"Enum:FloorNumber.{context.Floor}"]
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="BookDto"
								Field="@nameof(BookDto.BookStatu)"
								Caption="@L["Statu"]">
					<DisplayTemplate>
						@{
							var book = (context as BookDto);
							if (book.BookStatu == StatuType.Active)
							{
								<div class="statustemp e-activecolor">
									<span class="statustxt e-activecolor">@book.BookStatu</span>
								</div>

							}
							else
							{
								<div class="statustemp e-inactivecolor">
									<span class="statustxt e-inactivecolor">@book.BookStatu</span>
								</div>
							}
						}
                        <style>
                            .statustemp.e-inactivecolor {
                                background-color: #ffd7cc;
                                width: 64px;
                            }

                            .statustemp.e-activecolor {
                                background-color: #ccffcc;
                                width: 57px;
                            }

                            .statustxt.e-activecolor {
                                color: #00cc00;
                            }

                            .statustxt.e-inactivecolor {
                                color: #e60000;
                            }

                            .statustemp {
                                position: relative;
                                height: 19px;
                                border-radius: 5px;
                                text-align: center;
                            }

                            .statustxt {
                                position: relative;
                                top: -5px;
                            }
                        </style>
                        </DisplayTemplate>
                        </DataGridColumn>

            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

@code {

    public BolumType LibraryName = BolumType.YKütüphanesi;

    private PagedResultDto<BookDto> books;
    private string searchText = "";
    private IReadOnlyList<BookDto> filteredBooks = Array.Empty<BookDto>();


    //ADDED A NEW FIELD
    IReadOnlyList<AuthorLookupDto> authorList = Array.Empty<AuthorLookupDto>();
    IReadOnlyList<ShelfLookupDto> shelfList = Array.Empty<ShelfLookupDto>();

    [AllowAnonymous]
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        authorList = (await AppService.GetAuthorLookupAsync()).Items;
        shelfList = (await AppService.GetShelfLookupAsync()).Items;

        await LoadBooksAsync();
    }
    [AllowAnonymous]
    private async Task SearchBooksAsync(ChangeEventArgs e)
    {
        searchText = e.Value.ToString();

        if (string.IsNullOrEmpty(searchText))
        {
            // Reset to all books if search text is empty
            filteredBooks = books.Items;
            return;
        }

        filteredBooks = books.Items.Where(book => book.Name.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                                                book.AuthorName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase))
                                  .ToList(); // Create a filtered copy
    }
    [AllowAnonymous]
    private async Task LoadBooksAsync()
    {
        books = await BookAppService.GetBooksByLibraryAsync(LibraryName, new PagedAndSortedResultRequestDto());

        // Sonuçları filtrelenmiş kitap listesine atayın
        filteredBooks = books.Items;
    }

}